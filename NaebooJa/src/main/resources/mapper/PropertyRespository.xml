<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.lec.spring.repository.PropertyRepository">

    <insert id="save" flushCache="true" parameterType="com.lec.spring.domain.Property"
            useGeneratedKeys="true" keyColumn="id" keyProperty="id">
        INSERT INTO `property`
            (user_id, category, `name`, rest_money)
        VALUES
            (#{user.id}, #{category}, #{name}, #{rest_money})
    </insert>

    <!-- JOIN 문에서 여러 테이블의 데이터 매핑 받기 -->
    <!-- User 매핑 -->
<!--    <resultMap id="mapUser" type="com.lec.spring.domain.User">-->
<!--        <result column="u_id" property="id"/>   &lt;!&ndash;User.java&ndash;&gt;-->
<!--        <result column="u_username" property="username"/>-->
<!--        <result column="u_name" property="name"/>-->
<!--    </resultMap>-->

    <!-- Property 매핑 -->
<!--    <resultMap id="mapProperty" type="com.lec.spring.domain.Property"> &lt;!&ndash;Property 객체로 매핑&ndash;&gt;-->
<!--        <result column="p_id" property="id"/> &lt;!&ndash;p_id 값을 id 에 꽂아넣음(Property.java)&ndash;&gt;-->
<!--        <result column="p_category" property="category"/>-->
<!--        <result column="p_name" property="name"/>-->
<!--        <result column="p_rest_money" property="rest_money"/>-->
<!--        <collection property="user" resultMap="mapUser"/>&lt;!&ndash;User 객체에 대해서는 mapUser 로 이향&ndash;&gt;-->
<!--    </resultMap>-->

    <!-- Transaction 매핑 -->
<!--    <resultMap id="mapTransaction" type="com.lec.spring.domain.Transaction"> &lt;!&ndash;Transaction 객체로 매핑&ndash;&gt;-->
<!--        <result column="t_id" property="id"/> &lt;!&ndash;p_id 값을 id 에 꽂아넣음(Property.java)&ndash;&gt;-->
<!--        <result column="t_transaction_type" property="transaction_type"/>-->
<!--        <result column="t_regdate" property="regDate"/>-->
<!--        <result column="t_money" property="money"/>-->
<!--        <result column="t_category" property="category"/>-->
<!--        <result column="t_content" property="content"/>-->
<!--        <collection property="t_property_id" resultMap="mapProperty"/>-->
<!--        <collection property="t_in_property_id" resultMap="mapProperty"/>&lt;!&ndash;in_Property 객체에 대해서는 mapProperty 로 이향&ndash;&gt;-->
<!--    </resultMap>-->

    <!-- 반복해서 사용될 쿼리문은 sql 태그로 정의 include 태그로 가져다 쓸수 있다 -->
    <sql id="SELECT_BASE">
        SELECT
        p.id "p_id",
        p.category "p_category",
        p.name "p_name",
        p.rest_money "p_rest_money",
        u.id "u_id",
        u.username "u_username",
        u.name "u_name"
        FROM
        `property` p, `user` u, `transaction` t
        WHERE
        p.user_id = u.id
    </sql>

    <!--특정 ID의 하나의 자산을 찾는데 결과는 mapProperty⬇️ 가 책임진다-->
    <select id="findById" resultType = "com.lec.spring.domain.Property">
        <include refid="SELECT_BASE"/>
            AND p.id = #{id}
        ORDER BY p.id DESC
    </select>

    <!--특정 사용자의 전체 자산을 찾는데 결과는 mapProperty⬇️ 가 책임진다-->
    <select id="findAll" resultType="com.lec.spring.domain.Property">
        <include refid="SELECT_BASE"/>
            AND p.user_id = #{id}
        ORDER BY p.id ASC
    </select>

    <!--특정 사용자의 특정 자산의 전체 거래정보를 찾는데 결과는 mapTransaction⬇️ 가 책임진다-->
    <select id="findPropTransAll" resultType="com.lec.spring.domain.Transaction">
        SELECT
            t.id "t_id",
            t.property_id "t_property_id",
            t.transaction_type "t_transaction_type",
            t.regdate "t_regdate",
            t.money "t_money",
            t.category "t_category",
            t.content "t_content",
            t.in_property_id "t_in_property_id",
            p.id "p_id",
            p.category "p_category",
            p.name "p_name",
            p.rest_money "p_rest_money"
        FROM
            `transaction` t, `property` p, `user` u
        WHERE
            property_id = #{id}
            AND MONTH(t.regdate) = MONTH(#{date})
            AND YEAR(t.regdate) = YEAR(#{date})
        ORDER BY t.id DESC
    </select>

    <delete id="delete" flushCache="true"
            parameterType="com.lec.spring.domain.Property">
        DELETE FROM `property` WHERE id = #{id}
    </delete>

</mapper>